global:
  # SMTP configuration for email notifications (configure according to your email provider)
  smtp_smarthost: "localhost:587"
  smtp_from: "alertmanager@localhost"
  smtp_auth_username: "alertmanager@localhost"
  smtp_auth_password: "password"
  smtp_require_tls: false

# The directory from which notification templates are read.
templates:
  - "/etc/alertmanager/templates/*.tmpl"

# The root route on which each incoming alerts enters.
route:
  # The labels by which incoming alerts are grouped together.
  group_by: ["alertname", "cluster", "service", "severity"]

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  group_wait: 30s

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 5m

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: 12h

  # A default receiver
  receiver: "default-receiver"

  # Routes for different alert types
  routes:
    # Critical alerts go to console immediately
    - match:
        severity: critical
      receiver: "critical-alerts"
      group_wait: 10s
      repeat_interval: 30m

    # System alerts (node-exporter, cAdvisor)
    - match:
        service: system
      receiver: "system-alerts"
      group_by: ["alertname", "instance"]

    # Docker/container alerts
    - match:
        service: docker
      receiver: "docker-alerts"
      group_by: ["alertname", "container_name"]

    # Prometheus/Alertmanager self-monitoring
    - match_re:
        service: ^(prometheus|alertmanager)$
      receiver: "monitoring-alerts"

# Inhibition rules allow to mute a set of alerts given that another alert is firing.
inhibit_rules:
  - source_match:
      severity: "critical"
    target_match:
      severity: "warning"
    # Apply inhibition if the alertname and instance are the same.
    equal: ["alertname", "instance"]

  - source_match:
      alertname: "ContainerDown"
    target_match_re:
      alertname: "^Container.*"
    # If container is down, don't alert on container-specific metrics
    equal: ["container_name"]

receivers:
  # Default receiver for console output (development)
  - name: "default-receiver"
    webhook_configs:
      - url: "http://127.0.0.1:5001/"
        send_resolved: true
        title: "Alert: {{ .GroupLabels.alertname }}"
        text: |
          {{ range .Alerts }}
          Status: {{ .Status }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
          {{ end }}

  # Critical alerts - immediate notification
  - name: "critical-alerts"
    webhook_configs:
      - url: "http://127.0.0.1:5001/critical"
        send_resolved: true
        title: "üö® CRITICAL ALERT: {{ .GroupLabels.alertname }}"
        text: |
          {{ range .Alerts }}
          üî¥ Status: {{ .Status }}
          üö® Alert: {{ .Annotations.summary }}
          üìù Description: {{ .Annotations.description }}
          üè∑Ô∏è Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
          {{ end }}

  # System monitoring alerts
  - name: "system-alerts"
    webhook_configs:
      - url: "http://127.0.0.1:5001/system"
        send_resolved: true
        title: "üñ•Ô∏è System Alert: {{ .GroupLabels.alertname }}"
        text: |
          {{ range .Alerts }}
          Status: {{ .Status }}
          Instance: {{ .Labels.instance }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}

  # Docker container alerts
  - name: "docker-alerts"
    webhook_configs:
      - url: "http://127.0.0.1:5001/docker"
        send_resolved: true
        title: "üê≥ Docker Alert: {{ .GroupLabels.alertname }}"
        text: |
          {{ range .Alerts }}
          Status: {{ .Status }}
          Container: {{ .Labels.container_name }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}

  # Monitoring stack self-monitoring
  - name: "monitoring-alerts"
    webhook_configs:
      - url: "http://127.0.0.1:5001/monitoring"
        send_resolved: true
        title: "üìä Monitoring Alert: {{ .GroupLabels.alertname }}"
        text: |
          {{ range .Alerts }}
          Status: {{ .Status }}
          Service: {{ .Labels.service }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}

# Email configuration example (uncomment and configure as needed)
# - name: 'email-alerts'
#   email_configs:
#   - to: 'admin@example.com'
#     subject: 'Alert: {{ .GroupLabels.alertname }}'
#     body: |
#       {{ range .Alerts }}
#       Alert: {{ .Annotations.summary }}
#       Description: {{ .Annotations.description }}
#       Instance: {{ .Labels.instance }}
#       Severity: {{ .Labels.severity }}
#       {{ end }}

# Slack configuration example (uncomment and configure as needed)
# - name: 'slack-alerts'
#   slack_configs:
#   - api_url: 'YOUR_SLACK_WEBHOOK_URL'
#     channel: '#alerts'
#     username: 'Alertmanager'
#     icon_emoji: ':warning:'
#     title: 'Alert: {{ .GroupLabels.alertname }}'
#     text: |
#       {{ range .Alerts }}
#       Alert: {{ .Annotations.summary }}
#       Description: {{ .Annotations.description }}
#       {{ end }}
